(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{216:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"redis"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#redis"}},[t._v("#")]),t._v(" Redis")]),t._v(" "),e("h2",{attrs:{id:"_1-redis-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-redis-简介"}},[t._v("#")]),t._v(" 1. Redis 简介")]),t._v(" "),e("p",[t._v("Redis 是一个支持数据结构更多的键值对数据库。它的值不仅可以是字符串等基本数据 类型,也可以是类对象,更可以是 Set、List、计数器等高级的数据结构。")]),t._v(" "),e("p",[t._v("Memcached 也可以保存类似于 Set、List 这样的结构,但是如果说要向 List 中增加元素, Memcached 则需要把 List 全部元素取出来,然后再把元素增加进去,然后再保存回去,不仅效率低,而且有并发访问问题。Redis 内置的 Set、List 等可以直接支持增加、删除元素的 操作,效率很高,操作是原子的。")]),t._v(" "),e("p",[t._v("Memcached 数据存在内存中,memcached 重启后数据就消失;而 Redis 会把数据持久化到硬盘中,Redis 重启后数据还存在。")]),t._v(" "),e("ol",[e("li",[t._v("优点")])]),t._v(" "),e("ul",[e("li",[t._v("支持 string、list、set、geo 等复杂的数据结构。")]),t._v(" "),e("li",[t._v("高命中的数据运行时是在内存中,数据最终还是可以保存到磁盘中,这样服务器重 启之后数据还在。")]),t._v(" "),e("li",[t._v("服务器是单线程的,来自所有客户端的所有命令都是串行执行的,因此不用担心并 发修改(串行操作当然还是有并发问题)的问题,编程模型简单;")]),t._v(" "),e("li",[t._v("支持消息订阅/通知机制,可以用作消息队列;")]),t._v(" "),e("li",[t._v("Key、Value 最大长度允许 512M;")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("缺点")])]),t._v(" "),e("ul",[e("li",[t._v("Redis 是单线程的,因此单个 Redis 实例只能使用一个 CPU 核,不能充分发挥服务器的性能。可以在一台服务器上运行多个 Redis 实例,不同实例监听不同端口,再互相组成集群。")]),t._v(" "),e("li",[t._v("做缓存性能不如 Memcached;")])]),t._v(" "),e("p",[t._v("Redis高级教程参阅 "),e("a",{attrs:{href:"https://blog.csdn.net/hjm4702192/article/details/80518856",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/hjm4702192/article/details/80518856"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"_2-redis-安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-redis-安装"}},[t._v("#")]),t._v(" 2. Redis 安装")]),t._v(" "),e("p",[t._v("推荐使用Docker方式搭建redis服务器，简单高效。")]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[t._v("docker run "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-d "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--name redis "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n-p "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v(":6379 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\nredis:alpine "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("\n--requirepass "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"password"')]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("在安装Redis时会同时安装服务端和客户端。服务端为"),e("code",[t._v("redis-server")]),t._v("\b客户端为"),e("code",[t._v("redis-cli")]),t._v("。可以使用客户端执行 Redis Shell 命令。需要了解 Redis Shell 的读者可以参阅 "),e("a",{attrs:{href:"https://ccstudio.org/python/database/redis.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("redis driver for python"),e("OutboundLink")],1),t._v(" (接口与 Redis Shell 基本一致)。")]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 连接本地redis服务")]),t._v("\nredis-cli -p "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("6379")]),t._v(" -a password\n\nkeys * "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get all keys")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" name Colin "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# set a string value")]),t._v("\nget name "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# get a string value of name")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br")])]),e("p",[t._v("除了使用Redis提供的命令行客户端，我们也可以使用第三方GUI客户端，如"),e("a",{attrs:{href:"https://github.com/uglide/RedisDesktopManager/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Redis Desktop Manager"),e("OutboundLink")],1),t._v("等。一般客户端软件也提供了Redis命令行。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2020/02/25/wLeXlUBIHsmtYfG.jpg",alt:"Redis Desktop Manager"}})]),t._v(" "),e("h2",{attrs:{id:"_3-redis-数据类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-redis-数据类型"}},[t._v("#")]),t._v(" 3. Redis 数据类型")]),t._v(" "),e("h3",{attrs:{id:"_3-1-基础知识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-基础知识"}},[t._v("#")]),t._v(" 3.1 基础知识")]),t._v(" "),e("ul",[e("li",[t._v("不同系统放到 Redis 中的数据是不隔离的,因此设定 Key 的时候也要特别注意。")]),t._v(" "),e("li",[t._v("Redis 服务器默认建了 16 个数据库,Redis 的想法是让大家把不同系统的数据放到不同的数据库中。但是建议大家不要这样用,因为 Redis 是单线程的,不同业务都放到同一个 Redis 实例的话效率不高,建议放到不同的实例中。因此尽量只用默认的 db0 数据库。")]),t._v(" "),e("li",[t._v("Redis 支持的数据结构有 string、list、set、sortedset、hash、geo(redis 3.2 以上版本)。对应的 Redis 客户端里的方法都是 StringXXX、HashXXX、GeoXXX 等方法。不同数据类型的操作方 法不能混用,比如不能用 ListXXX 写入的值用 StringXXX 去读取或者写入等操作。")]),t._v(" "),e("li",[t._v("Redis的所有数据类型本质上最终存储的都是String类型，Set等高级类型只是使用不同数据结构管理String类型。所以Redis中并不能存储复杂对象，但可序列化后存储。")])]),t._v(" "),e("h3",{attrs:{id:"_3-2-redis-driver"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-redis-driver"}},[t._v("#")]),t._v(" 3.2 Redis Driver")]),t._v(" "),e("p",[t._v("Redis作为流行的内NoSQL内存数据库，各主流平台都提供了相应的Driver，下面我们以.Net平台为例，其他平台基本类似。")]),t._v(" "),e("p",[t._v(".NET Core平台下，ServiceStack.Redis 是商业版，免费版有限制。StackExchange.Redis 2.0之前版本有超时问题，现已解决。除了这两个传统的库之外，国内大牛也开了一些优秀的高性能.Net Core的Redis组件，供我们选择。")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"http://git.newlifex.com/NewLife/NewLife.Redis",target:"_blank",rel:"noopener noreferrer"}},[t._v("NewLife.Redis"),e("OutboundLink")],1),t._v(" 他是NewLife团队开发的，已经在ZTO大数据实时计算中广泛应用，200多个Redis实例稳定工作一年多，每天处理近1亿包裹数据，日均调用量80亿次。")]),t._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/2881099/csredis",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSRedis"),e("OutboundLink")],1),t._v(" (这里我更喜欢把它叫做CSRedisCore)这是另一个国内大牛nicye 开发的，为人很低调，所以了解他的人很少！目前我项目中广泛使用的也是这个。作者前不久刚做了一个几大Redis组件的性能测试.net core 2.0 redis驱动性能比拼 有兴趣的可以打开链接看一下。")])]),t._v(" "),e("p",[t._v("详细对比和使用方式可参阅以下文档：")]),t._v(" "),e("ul",[e("li",[t._v("https://www.cnblogs.com/yilezhu/p/9947905.html")]),t._v(" "),e("li",[t._v("https://www.cnblogs.com/yilezhu/p/9941208.html")])]),t._v(" "),e("p",[t._v("下面我们以使用最广泛的"),e("a",{attrs:{href:"https://stackexchange.github.io/StackExchange.Redis/",target:"_blank",rel:"noopener noreferrer"}},[t._v("StackExchange.Redis"),e("OutboundLink")],1),t._v("为例讲解。")]),t._v(" "),e("div",{staticClass:"custom-block warning"},[e("p",{staticClass:"custom-block-title"},[t._v("Redis 连接")]),t._v(" "),e("p",[t._v("官方推荐在程序中建立单例 Redis 连接对象进行复用，而不像关系型数据库连接每次用完释放。")])]),t._v(" "),e("div",{staticClass:"language-csharp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" redis "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ConnectionMultiplexer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Connect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"localhost:6379"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//官方推荐重用Redis连接而不是每次用完释放")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IDatabase")]),t._v(" db "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetDatabase")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//默认访问 db0 数据库,可以指定数字访问不同的数据库")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("ul",[e("li",[t._v("支持设置过期时间:"),e("code",[t._v('db.StringSet("key", "value", TimeSpan.FromSeconds(10))')])]),t._v(" "),e("li",[t._v("获取数据:"),e("code",[t._v('string s = db.StringGet("key")')]),t._v("如果查不到则返回 null")]),t._v(" "),e("li",[t._v("参数、返回值 "),e("code",[t._v("RedisKey")]),t._v("、"),e("code",[t._v("RedisValue")]),t._v(" 类型,进行了运算符重载,可以和 "),e("code",[t._v("string")]),t._v("、 "),e("code",[t._v("byte[]")]),t._v("之间进行隐式转换。")])]),t._v(" "),e("h3",{attrs:{id:"_3-4-key"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-key"}},[t._v("#")]),t._v(" 3.4 Key")]),t._v(" "),e("p",[t._v("Redis 里所有数据类型都是用 Key-Value 保存,因此 "),e("strong",[t._v("Key 操作是针对所有数据类型")]),t._v("。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("KeyDelete(RedisKey key)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("根据 Key 删除;")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("KeyExists(RedisKey key)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("判断 Key 是否存在,存在并发问题;")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[e("code",[t._v("KeyExpire(RedisKey key, TimeSpan? expiry)")])]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("设置过期时间")])])])]),t._v(" "),e("h3",{attrs:{id:"_3-5-string"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-string"}},[t._v("#")]),t._v(" 3.5 String")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("db.StringAppend(RedisKey key, RedisValue value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("附加内容,不存在则新建;")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v('db.StringIncrement("count", 2.5)')]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("计数器加值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v('db.StringDecrement("count",1)')]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("计数器减值")])])])]),t._v(" "),e("p",[t._v("计数器不存在则从0开始计，可以以此来计算新闻点击量、点赞量,非常高效。")]),t._v(" "),e("h3",{attrs:{id:"_3-6-list"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-6-list"}},[t._v("#")]),t._v(" 3.6 List")]),t._v(" "),e("p",[t._v("Redis 中 List是双向链表，长度是无限，左右都可出入元素。可以当成双向队列或者双向栈用,比如可以把聊天记录、商品的物流信息等保存到 List 中。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ListLeftPush(RedisKey key, RedisValue value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左侧压栈")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("RedisValue ListLeftPop(RedisKey key)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从左侧弹出")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("ListRightPush(RedisKey key, RedisValue value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从右侧压栈")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("RedisValue ListRightPop(RedisKey key)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从右侧弹出")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("RedisValue ListGetByIndex(RedisKey key, long index)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("获取 List 中第 index 个元素的值")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("long ListLength(RedisKey key)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("获取List 中元素个数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("RedisValue[] ListRange(RedisKey key, long start = 0, long stop = -1)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("读但不取出元素")])])])]),t._v(" "),e("p",[e("em",[t._v("ListGetByIndex,ListLength 会有并发问题")])]),t._v(" "),e("p",[t._v("左进左出或右进右出则可作为栈使用，左进右出或右进左出则可作为队列使用。可以使用Redis的List用作轻量的消息队列使用。")]),t._v(" "),e("h3",{attrs:{id:"_3-7-set"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-7-set"}},[t._v("#")]),t._v(" 3.7 Set")]),t._v(" "),e("p",[t._v("Set 是一个元素去重的集合。如使用 Set 保存禁用用户 id 等,就不用做重复性判断了。")]),t._v(" "),e("p",[t._v("注意 Set 不是按照插入顺序遍历的,而是按照自己的一个存储方式来遍历。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("bool SetAdd(RedisKey key, RedisValue value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("向 Set 中增加元素，如果已存在则返回false")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("bool SetContains(RedisKey key, RedisValue value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("判断 Set 中是否存在某个元素")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("long SetLength(RedisKey key)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("获得 Set 中元素的个数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("SetRemove(RedisKey key, RedisValue value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("从 Set 中删除元素")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("RedisValue[] SetMembers(RedisKey key)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("获取集合中的元素")])])])]),t._v(" "),e("p",[e("em",[t._v("SetContains,SetLength 会有并发问题")])]),t._v(" "),e("h3",{attrs:{id:"_3-8-sortedset-zset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-8-sortedset-zset"}},[t._v("#")]),t._v(" 3.8 SortedSet(ZSet)")]),t._v(" "),e("p",[t._v("与Set相比SortedSet除了key,value外还提供了一个score字段记录数据记录的“分数”。如果对于数据遍历顺序有要求,可以使用 SortedSet,它会按照分数来进行遍历。"),e("strong",[t._v("SortedSet也称 ZSet")]),t._v("。")]),t._v(" "),e("table",[e("thead",[e("tr",[e("th",{staticStyle:{"text-align":"left"}},[t._v("方法")]),t._v(" "),e("th",{staticStyle:{"text-align":"left"}},[t._v("作用")])])]),t._v(" "),e("tbody",[e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("SortedSetAdd(RedisKey key, RedisValue member, double score)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("添加数据记录和分数,如果存在则覆盖")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("double SortedSetIncrement(RedisKey key, RedisValue member, double value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("增加分数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("double SortedSetDecrement(RedisKey key, RedisValue member, double value)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("减少分数")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("SortedSetEntry[] SortedSetRangeByRankWithScores(RedisKey key, long start = 0, long stop = -1, Order order = Order.Ascending)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("根据排序返回元素以及元素的分数。start、stop 用来分页查询、order 指定排序规则。")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("RedisValue[] SortedSetRangeByRank(RedisKey key, long start = 0, long stop = -1, Order order = Order.Ascending)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("根据排序返回，如返回TOP10元素")])]),t._v(" "),e("tr",[e("td",{staticStyle:{"text-align":"left"}},[t._v("RedisValue[] SortedSetRangeByScore(RedisKey key, double start = double.NegativeInfinity, double stop = double.PositiveInfinity, Exclude exclude = Exclude.None, Order order = Order.Ascending, long skip = 0, long take = -1)")]),t._v(" "),e("td",{staticStyle:{"text-align":"left"}},[t._v("根据分数返回。如返回大于90分的元素")])])])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("应用场景")]),t._v(" "),e("ul",[e("li",[t._v("热搜榜。每搜一次一个关键词,就给这个关键词加一分，最后提取 TOP-N 即可")]),t._v(" "),e("li",[t._v("热门商品")]),t._v(" "),e("li",[t._v("积分投票")])])]),t._v(" "),e("h3",{attrs:{id:"_3-9-hash"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-9-hash"}},[t._v("#")]),t._v(" 3.9 Hash")]),t._v(" "),e("p",[t._v("Hash的value 是一个“键值对集合”或者值是另外一个 Dictionary。可以用于存储对象，类似于Json方式存储对象。")]),t._v(" "),e("h3",{attrs:{id:"_3-10-geo"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-10-geo"}},[t._v("#")]),t._v(" 3.10 Geo")]),t._v(" "),e("p",[t._v("Geo 是 Redis 3.2 版本后新增的数据类型,用来保存兴趣点(POI,point of interest)的坐标信息。 可以实现计算两 POI 之间的距离、获取一个点周边指定距离的 POI。可用于搜索指定地理位置周边的数据，如嘀嘀打车，附近的人等。")]),t._v(" "),e("h2",{attrs:{id:"_4-高级操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-高级操作"}},[t._v("#")]),t._v(" 4. 高级操作")]),t._v(" "),e("h3",{attrs:{id:"_4-1-批量操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-批量操作"}},[t._v("#")]),t._v(" 4.1 批量操作")]),t._v(" "),e("p",[t._v("频繁操作会影响Redis性能,我们可以使用批量操作来较少请求次数。")]),t._v(" "),e("ul",[e("li",[e("ol",[e("li",[t._v("数组操作\n几乎所有操作都支持数组类型,这样就可以一次性操作多条数据,如SortedSetAdd(RedisKey key, SortedSetEntry[] values)")])])]),t._v(" "),e("li",[e("ol",{attrs:{start:"2"}},[e("li",[t._v("批量模式")])])])]),t._v(" "),e("div",{staticClass:"language-csharp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IBatch")]),t._v(" batch "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" db"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("CreateBatch")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("StringSet")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"abc"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ndb"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GeoAdd")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ShopsGeo1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("GeoEntry")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("116.34039")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("39.94218")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nbatch"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Execute")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br")])]),e("p",[t._v("CreateBatch()、Execute()之间的操作会一次性提交给Redis服务器。")]),t._v(" "),e("h3",{attrs:{id:"_4-2-发布订阅"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-发布订阅"}},[t._v("#")]),t._v(" 4.2 发布订阅")]),t._v(" "),e("p",[t._v("Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。Redis 客户端可以订阅任意数量的频道。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2020/02/25/XA67JW3EOu2Icqg.png",alt:"Redis发布订阅示意图"}})]),t._v(" "),e("div",{staticClass:"language-csharp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//发布")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pub "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ConnectionMultiplexer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Connect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connectionString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSubscriber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" pub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("PublishAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"channel1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"message content"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("div",{staticClass:"language-csharp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//订阅")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pub "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ConnectionMultiplexer"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Connect")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("connectionString"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("GetSubscriber")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" pub"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("SubscribeAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"channle1"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("chn"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br")])]),e("p",[t._v("发布订阅和List作队列使用，分别实现了发布订阅模式和生产者消费者模式，可以作轻量级消息队列使用，处理并发和解除应用间耦合关系等。")]),t._v(" "),e("h3",{attrs:{id:"_4-3-分布式锁"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-分布式锁"}},[t._v("#")]),t._v(" 4.3 分布式锁")]),t._v(" "),e("p",[t._v("多线程中的 lock 等的作用范围是当前的程序范围内的,如果想跨多台服务器的锁(尽量避免这样搞),就要使用分布式锁，如作秒杀活动等。")]),t._v(" "),e("p",[t._v("分布式锁一般有三种实现方式：")]),t._v(" "),e("ul",[e("li",[t._v("数据库乐观锁")]),t._v(" "),e("li",[t._v("基于Redis的分布式锁")]),t._v(" "),e("li",[t._v("基于ZooKeeper的分布式锁")])]),t._v(" "),e("p",[t._v("这里我们主要介绍基于Redis的分布式锁。")]),t._v(" "),e("div",{staticClass:"language-csharp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// <summary>")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// 获取分布式锁并执行")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// </summary>")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/// <param name="action">获取锁成功时执行的业务方法</param>')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/// <param name="key">要锁定的key。用相同且唯一的key来当竞争对象,即要锁的对象</param>')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/// <param name="value">给value赋值是为了明确锁是哪个请求加的,解锁时也必须是具有相同value的请求才能解锁，保证不会被其他请求解锁。</param>')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/// <param name="expiryMillisecond">超时时间</param>')]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/// <returns>竞争锁是否成功</returns>")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("async")]),t._v(" Task"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("bool")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("LockExecuteAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Action")]),t._v(" action"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" expiryMillisecond "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[t._v("3000")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//竞争锁")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" Db"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("LockTakeAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" TimeSpan"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("FromMilliseconds")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expiryMillisecond"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("false")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取锁后执行业务方法")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("action")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("true")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Db"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("LockRelease")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("value")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//解锁")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br")])]),e("div",{staticClass:"language-csharp line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" guid "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" Guid"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("NewGuid")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("ToString")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nRedis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("LockExecuteAsync")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v("Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"成功抢到锁"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lockKey"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("guid"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br")])]),e("h2",{attrs:{id:"_5-redis-集群"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-redis-集群"}},[t._v("#")]),t._v(" 5. Redis 集群")]),t._v(" "),e("h3",{attrs:{id:"_5-1-主从架构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-主从架构"}},[t._v("#")]),t._v(" 5.1 主从架构")]),t._v(" "),e("p",[t._v("Redis可以配置"),e("code",[t._v("master-slave")]),t._v("模式来实现读写分离，数据备份和故障转移等功能。一般master节点用于写数据，而数据读取可以直接访问slave节点，slave节点数据默认只读。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2020/02/25/QzB8V7LZPUCAKFl.jpg",alt:"Redis横向主从结构"}})]),t._v(" "),e("p",[t._v("master节点可以配置多slave节点，master的slave节点太多会增加主从同步资源开销,可以使用下面的拓扑结构减轻主节点推送的压力。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2020/02/25/nVvcIrXmzxRUB6M.jpg",alt:"Redis纵向主从结构"}})]),t._v(" "),e("p",[t._v("下面是一个“一主二从”的docker-compose示例。")]),t._v(" "),e("div",{staticClass:"language-yml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-yml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("version")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'3.7'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("services")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis-master")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("alpine\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("master\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("requirepass master_password\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6379:6379"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis-slave1")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("alpine\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("slave1\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("slaveof redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("master 6379 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("masterauth master_password "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("port 6380 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("requirepass slave_password\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6380:6380"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("depends_on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("master\n\n  "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("redis-slave2")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("image")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("alpine\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("container_name")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("slave2\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("command")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("server "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("slaveof redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("master 6379 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("masterauth master_password "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("port 6381 "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("requirepass slave_password\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("ports")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" \n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"6381:6381"')]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("restart")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" always\n    "),e("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("depends_on")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" redis"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v("master\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br"),e("span",{staticClass:"line-number"},[t._v("16")]),e("br"),e("span",{staticClass:"line-number"},[t._v("17")]),e("br"),e("span",{staticClass:"line-number"},[t._v("18")]),e("br"),e("span",{staticClass:"line-number"},[t._v("19")]),e("br"),e("span",{staticClass:"line-number"},[t._v("20")]),e("br"),e("span",{staticClass:"line-number"},[t._v("21")]),e("br"),e("span",{staticClass:"line-number"},[t._v("22")]),e("br"),e("span",{staticClass:"line-number"},[t._v("23")]),e("br"),e("span",{staticClass:"line-number"},[t._v("24")]),e("br"),e("span",{staticClass:"line-number"},[t._v("25")]),e("br"),e("span",{staticClass:"line-number"},[t._v("26")]),e("br"),e("span",{staticClass:"line-number"},[t._v("27")]),e("br"),e("span",{staticClass:"line-number"},[t._v("28")]),e("br"),e("span",{staticClass:"line-number"},[t._v("29")]),e("br"),e("span",{staticClass:"line-number"},[t._v("30")]),e("br")])]),e("p",[t._v("主从结构中只需要修改slave节点配置文件，添加"),e("code",[t._v("slaveof")]),t._v("参数绑定主节点即可。或者我们可以使用docker-compose来快速搭建一个主从结构的Reids环境。")]),t._v(" "),e("p",[t._v("主从架构中如果master节点出现故障，需要人工选择和修改slave节点配置升级其为新的master节点，无法实现高可用性。高可用(主从复制、主从切换)redis集群有两种方案，一种是redis-sentinel，只有一个master，各实例数据保持一致；一种是redis-cluster，也叫分布式redis集群，可以有多个master，数据分片分布在这些master上。")]),t._v(" "),e("blockquote",[e("p",[t._v("redis标准配置文件 "),e("a",{attrs:{href:"http://download.redis.io/redis-stable/redis.conf",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://download.redis.io/redis-stable/redis.conf"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"_5-2-redis-sentinel"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-redis-sentinel"}},[t._v("#")]),t._v(" 5.2 redis-sentinel")]),t._v(" "),e("p",[t._v("哨兵机制(sentinel)可以在主节点出现故障时，由Redis Sentinel自动完成故障发现和转移，并通知应用方，实现高可用性。")]),t._v(" "),e("p",[t._v("redis-sentinel作为独立的服务，用于管理多个redis实例，该系统主要执行以下四个任务：")]),t._v(" "),e("ul",[e("li",[t._v("监控 (Monitor): 检查redis主、从实例是否正常运作")]),t._v(" "),e("li",[t._v("通知 (Notification): 监控的redis服务出现问题时，可通过API发送通知告警")]),t._v(" "),e("li",[t._v("自动故障迁移 (Automatic Failover): 当检测到redis主库不能正常工作时，redis-sentinel会开始做自动故障判断、迁移等操作，先是移除失效redis主服务，然后将其中一个从服务器升级为新的主服务器，并让失效主服务器的其他从服务器改为复制新的主服务器。当客户端试图连接失效的主服务器时，集群也会向客户端返回最新主服务器的地址，使得集群可以使用新的主服务器来代替失效服务器")]),t._v(" "),e("li",[t._v("配置中心。sentinel启动时指定了mater节点，并可自动发现和动态更新slave节点。它可为应用程序提供集群中所有节点信息。")])]),t._v(" "),e("p",[t._v("我们只需要配置master节点即可，Sentinel会自动发现slave节点并动态更新配置。")]),t._v(" "),e("p",[t._v("Redis至少使用三个Sentinel节点。sentinel.conf简单配置如下。")]),t._v(" "),e("div",{staticClass:"language-conf line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("port 26379\n\n# bind to master node.the 'redis-service' is an alias.\n# redis-master 6379 is the address of master node\n# The quorum was set to the value of 2 (last argument of sentinel monitor configuration directive).\nsentinel monitor redis-service redis-master 6379 2\n\n# down-after-milliseconds value is 5000 milliseconds, that is 5 seconds, so masters will be detected as failing as soon as we don't receive any reply from our pings within this amount of time.\nsentinel down-after-milliseconds redis-service 5000\n\nsentinel failover-timeout redis-service 60000\nsentinel parallel-syncs redis-service 1\n\nsentinel auth-pass redis-service master_password\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br")])]),e("p",[e("img",{attrs:{src:"https://i.loli.net/2020/02/25/tmP4hzVXL6MNurB.jpg",alt:"Redis哨兵机制"}})]),t._v(" "),e("ul",[e("li",[t._v("Docker方式搭建推荐使用 "),e("a",{attrs:{href:"https://hub.docker.com/r/grokzen/redis-cluster",target:"_blank",rel:"noopener noreferrer"}},[t._v("grokzen/redis-cluster"),e("OutboundLink")],1),t._v("镜像。")]),t._v(" "),e("li",[t._v("应用程序与redis-sentinel集群交互示例参阅 "),e("a",{attrs:{href:"https://ccstudio.org/python/database/redis.html#_2-1-redis-sentinel",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://ccstudio.org/python/database/redis.html#_2-1-redis-sentinel"),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("参考资料")])]),t._v(" "),e("ul",[e("li",[t._v("Sentinel官方文档: "),e("a",{attrs:{href:"https://redis.io/topics/sentinel",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://redis.io/topics/sentinel"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("标准配置文件: "),e("a",{attrs:{href:"http://download.redis.io/redis-stable/sentinel.conf",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://download.redis.io/redis-stable/sentinel.conf"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://www.cnblogs.com/hckblogs/p/11186311.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/hckblogs/p/11186311.html"),e("OutboundLink")],1)]),t._v(" "),e("li",[e("a",{attrs:{href:"https://blog.51cto.com/8939110/2429771",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.51cto.com/8939110/2429771"),e("OutboundLink")],1)])]),t._v(" "),e("h3",{attrs:{id:"_5-3-redis-cluster"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-redis-cluster"}},[t._v("#")]),t._v(" 5.3 redis-cluster")]),t._v(" "),e("p",[t._v("Redis3.0版本之前，可以通过Redis Sentinel来实现高可用，从3.0版本之后，官方推出了Redis Cluster，它的主要用途是实现数据分片(Data Sharding)，同样可以实现高可用，是官方当前推荐的方案。\n·\nredis cluster在设计的时候，就考虑到了去中⼼化，去中间件，集群中的每个节点都是平等的，每个节点都保存各⾃的数据和整个集群的状态。每个节点都和其他所有节点连接，⽽且这些连接保持活跃，保证只需要连接集群中任意节点，都可获取到其他节点的数据。")]),t._v(" "),e("p",[e("img",{attrs:{src:"https://i.loli.net/2020/02/25/iUYerCkMWEFca7l.jpg",alt:"redis-cluster-slot"}})]),t._v(" "),e("p",[t._v("在Redis Sentinel模式中，每个节点需要保存全量数据，冗余比较多，而在Redis Cluster模式中，每个分片只需要保存一部分的数据。 Redis Cluster的具体实现细节是采用了Hash槽的概念，集群会预先分配16384个槽，并将这些槽分配给具体的服务节点，通过对Key进行CRC16(key)%16384运算得到对应的槽是哪一个，从而将读写操作转发到该槽所对应的服务节点。当有新的节点加入或者移除的时候，再来迁移这些槽以及其对应的数据。在这种设计之下，我们就可以很方便的进行动态扩容或缩容。")]),t._v(" "),e("p",[t._v("Redis Cluster同样采用Master-Salve模式，写数据在master节点，它会与其对应的salve进⾏数据同步。当读取数据时，也根据⼀致性哈希算法到对应的master节点获取数据。当⼀个master挂掉之后，会自动切换其对应salve节点为新master节点。")]),t._v(" "),e("p",[e("strong",[t._v("redis-cluster要求至少3个主节点(否则在创建集群时会失败)")]),t._v("，并且当存活的主节点数⼩于总节点数的⼀半时，整个集群就⽆法提供服务了。")]),t._v(" "),e("ul",[e("li",[t._v("Docker方式搭建推荐使用 "),e("a",{attrs:{href:"https://hub.docker.com/r/grokzen/redis-cluster",target:"_blank",rel:"noopener noreferrer"}},[t._v("grokzen/redis-cluster"),e("OutboundLink")],1),t._v("镜像。")]),t._v(" "),e("li",[t._v("物理机搭建教程参阅 "),e("a",{attrs:{href:"https://www.cnblogs.com/wuxl360/p/5920330.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.cnblogs.com/wuxl360/p/5920330.html"),e("OutboundLink")],1)]),t._v(" "),e("li",[t._v("应用程序与redis-cluster交互示例参阅 "),e("a",{attrs:{href:"https://ccstudio.org/python/database/redis.html#_2-2-redis-cluster",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://ccstudio.org/python/database/redis.html#_2-2-redis-cluster"),e("OutboundLink")],1)])]),t._v(" "),e("blockquote",[e("p",[t._v("参考资料 "),e("a",{attrs:{href:"https://redis.io/topics/cluster-tutorial/",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档"),e("OutboundLink")],1)])]),t._v(" "),e("h2",{attrs:{id:"_6-应用程序交互"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-应用程序交互"}},[t._v("#")]),t._v(" 6. 应用程序交互")]),t._v(" "),e("blockquote",[e("p",[t._v("Python Redis交互请参阅 "),e("a",{attrs:{href:"https://ccstudio.org/python/database/redis.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://ccstudio.org/python/database/redis.html"),e("OutboundLink")],1),t._v("。")])]),t._v(" "),e("p",[t._v("Redis的大部分常用操作都是相同的，这里我们基于"),e("code",[t._v("StackExchange.Redis")]),t._v("和"),e("code",[t._v(".Net Standard 2.0")]),t._v("封装一个帮助类。")]),t._v(" "),e("ul",[e("li",[t._v("包含String,List,Set,SortedSet,Hash等常用数据类型操作。")]),t._v(" "),e("li",[t._v("支持发布订阅")]),t._v(" "),e("li",[t._v("支持批量执行")]),t._v(" "),e("li",[t._v("支持分布式锁")])]),t._v(" "),e("p",[t._v("代码已上传到Github，这里不再展开。\nhttps://github.com/colin-chang/RedisHelper")]),t._v(" "),e("p",[t._v("具体使用方式可以查看单元测试\nhttps://github.com/colin-chang/RedisHelper/blob/master/ColinChang.RedisHelper.Test/RedisHelperTest.cs")]),t._v(" "),e("blockquote",[e("p",[e("a",{attrs:{href:"https://www.nuget.org/packages/ColinChang.RedisHelper/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Nuget - ColinChang.RedisHelper"),e("OutboundLink")],1)])]),t._v(" "),e("div",{staticClass:"language-sh line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-sh"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Package Manager")]),t._v("\nInstall-Package ColinChang.RedisHelper\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# .NET CLI")]),t._v("\ndotnet "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" package ColinChang.RedisHelper\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br")])])])}),[],!1,null,null,null);s.default=n.exports}}]);